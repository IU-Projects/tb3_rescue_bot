#!/usr/bin/env python


import rospy
from geometry_msgs.msg import Twist
import tf.transformations
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped
import sys, select, termios, tty
from subprocess import call

msg = """
Control Your tb3!
---------------------------
Press Any of the following choices:
1). Start Exploration
2). Start Mapping
3). Stop Exploration
4). Save the Map
5). Navigate Back to Start
6). Terminate All

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def startExploration():
    call(["rosservice","call","/StartExploration"])
    print "StartExploration message sent"

def startMapping():
    call(["rosservice","call","/StartMapping"])
    print "StartMapping message sent"

def goToStart():
    pose = PoseStamped()
    pose.header.stamp = rospy.Time.now()
    pose.header.frame_id = "map"
    pose.pose.position.x = 7.50
    pose.pose.position.y = 0.25
    pose.pose.position.z = 0.00

    quaternion = tf.transformations.quaternion_from_euler(0, 0, 3.14159)
    pose.pose.orientation.x = quaternion[0]
    pose.pose.orientation.y = quaternion[1]
    pose.pose.orientation.z = quaternion[2]
    pose.pose.orientation.w = quaternion[3]

    return pose


def stop():
    call(["rosservice","call","/Stop"])
    print "Stop message sent"

def killAll():
    call(["rosnode","kill","-a"])
    print "All ros services are terminated"

def saveMap():
    print "map is being saved in following location"
    call(["pwd"])
    call(["rosrun","map_server","map_saver","-f","saved_map"])
    print "map saved"


if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('tb3_teleop')
    #pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    pubGoal = rospy.Publisher('goal', PoseStamped, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "waffle")

    status = 0

    try:
        print msg
        while(1):
            key = getKey()
            if key == '1' :
                startExploration()
                status = status + 1
            elif key == '2' :
                startMapping()
                status = status + 1
            elif key == '3' :
                stop()
                status = status + 1
            elif key == '4' :
                saveMap()
                status = status + 1
            elif key == '5' :
                pose = goToStart()
                pubGoal.publish(pose)
                print "Navigation Back to Start point is initiated"
                status = status + 1
            elif key == '6' :
                killAll()
                status = status + 1
            else:
                if (key == '\x03'):
                    break

            if status == 20 :
                print msg
                status = 0

    except:
        print e

    finally:
        print "tb3_teleop finished"
        #pub.publish(twist)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
